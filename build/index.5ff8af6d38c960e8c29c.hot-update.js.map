{"version":3,"file":"index.5ff8af6d38c960e8c29c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AAMiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiC;AAC2B;AAC7C,SAASQ,IAAIA,CAAC;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACtE;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,+CAAQ,CAAC,MAAM,CAAC;EACtDU,OAAO,CAACC,GAAG,CAACP,UAAU,CAAC;EACvBM,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACnB,MAAMC,cAAc,GAAIC,SAAS,IAAK;IACrC,IAAIT,UAAU,CAACU,QAAQ,EAAE;MACxBR,aAAa,CAAC,CAAC;MACf,OACCS,oDAAA;QACCC,GAAG,EAAEZ,UAAU,CAACU,QAAS;QACzBG,OAAO,EAAEJ,SAAU;QACnBK,GAAG,EAAEd,UAAU,EAAEe,QAAS;QAC1Bd,SAAS,EAAC;MAAkB,CAC5B,CAAC;IAEJ,CAAC,MAAM;MACN,OACCU,oDAAA;QAAKV,SAAS,EAAC;MAAkB,GAChCU,oDAAA,CAACb,yDAAM;QAACe,OAAO,EAAEJ,SAAU;QAACR,SAAS,EAAC;MAAqB,GAAC,eAEpD,CACJ,CAAC;IAER;EACD,CAAC;EAED,OACCU,oDAAA;IAAA,GAAanB,sEAAa,CAAC;EAAC,GAC3BmB,oDAAA;IACCK,KAAK,EAAEhB,UAAU,CAACI,WAAY;IAC9Ba,QAAQ,EAAGC,CAAC,IAAK;MAChBZ,OAAO,CAACC,GAAG,CAACW,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;MAC3Bd,aAAa,CAAC;QAAEE,WAAW,EAAEc,CAAC,CAACC,MAAM,CAACH;MAAM,CAAC,CAAC;MAC9CX,cAAc,CAACa,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;IAC/B;EAAE,GAEFL,oDAAA;IAAQK,KAAK,EAAC;EAAM,GAAC,2BAAiC,CAAC,EACvDL,oDAAA;IAAQK,KAAK,EAAC;EAAO,GAAC,2BAAiC,CAChD,CAAC,EAERZ,WAAW,IAAI,OAAO,GACtBO,oDAAA,cAOCA,oDAAA,CAAChB,6DAAQ;IACRyB,OAAO,EAAC,GAAG,CAAC;IAAA;IACZJ,KAAK,EAAEhB,UAAU,CAACqB,IAAK,CAAC;IAAA;IACxBC,cAAc,EAAE,CAAC,WAAW,EAAE,aAAa,EAAE,WAAW,CAAE,CAAC;IAAA;IAC3DL,QAAQ,EAAGM,OAAO,IAAKrB,aAAa,CAAC;MAAEmB,IAAI,EAAEE;IAAQ,CAAC,CAAE,CAAC;IAAA;IACzDC,WAAW,EAAEjC,mDAAE,CAAC,YAAY,CAAE,CAAC;EAAA,CAC/B,CAAC,EAEFoB,oDAAA,CAACjB,qEAAgB,QAChBiB,oDAAA,CAAClB,gEAAW;IACXgC,QAAQ,EAAGC,KAAK,IAAK;MACpBxB,aAAa,CAAC;QAAEa,QAAQ,EAAEW,KAAK,CAACZ,GAAG;QAAEJ,QAAQ,EAAEgB,KAAK,CAACC;MAAI,CAAC,CAAC;IAC5D,CAAE;IACFC,IAAI,EAAC,OAAO;IACZZ,KAAK,EAAEhB,UAAU,CAAC6B,OAAQ;IAC1BC,MAAM,EAAEA,CAAC;MAAEC;IAAK,CAAC,KAAKvB,cAAc,CAACuB,IAAI;EAAE,CAC3C,CACgB,CACd,CAAC,GAENpB,oDAAA,cACCA,oDAAA,CAACjB,qEAAgB,QAChBiB,oDAAA,CAAClB,gEAAW;IACXgC,QAAQ,EAAGC,KAAK,IAAK;MACpBxB,aAAa,CAAC;QAAEa,QAAQ,EAAEW,KAAK,CAACZ,GAAG;QAAEJ,QAAQ,EAAEgB,KAAK,CAACC;MAAI,CAAC,CAAC;IAC5D,CAAE;IACFC,IAAI,EAAC,OAAO;IACZZ,KAAK,EAAEhB,UAAU,CAAC6B,OAAQ;IAC1BC,MAAM,EAAEA,CAAC;MAAEC;IAAK,CAAC,KAAKvB,cAAc,CAACuB,IAAI;EAAE,CAC3C,CACgB,CAAC,EASnBpB,oDAAA,CAAChB,6DAAQ;IACRyB,OAAO,EAAC,GAAG,CAAC;IAAA;IACZJ,KAAK,EAAEhB,UAAU,CAACqB,IAAK,CAAC;IAAA;IACxBC,cAAc,EAAE,CAAC,WAAW,EAAE,aAAa,EAAE,WAAW,CAAE,CAAC;IAAA;IAC3DL,QAAQ,EAAGM,OAAO,IAAKrB,aAAa,CAAC;MAAEmB,IAAI,EAAEE;IAAQ,CAAC,CAAE,CAAC;IAAA;IACzDC,WAAW,EAAEjC,mDAAE,CAAC,YAAY,CAAE,CAAC;EAAA,CAC/B,CACG,CAEE,CAAC;AAEZ;AAACY,EAAA,CAnGuBJ,IAAI;EAAA,QA4BbP,kEAAa;AAAA;AAAAwC,EAAA,GA5BJjC,IAAI;AAAA,IAAAiC,EAAA;AAAAC,sCAAA,CAAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCvC5B","sources":["webpack://test/./src/edit.js","webpack://test/webpack/runtime/getFullHash"],"sourcesContent":["/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/\n */\nimport { __ } from \"@wordpress/i18n\";\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport {\n\tuseBlockProps,\n\tMediaUpload,\n\tMediaUploadCheck,\n\tRichText,\n} from \"@wordpress/block-editor\";\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * Those files can contain any CSS code that gets applied to the editor.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport \"./editor.scss\";\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @return {Element} Element to render.\n */\n\nimport { useState } from \"react\";\nimport { TextControl, Button } from \"@wordpress/components\";\nexport default function Edit({ attributes, className, setAttributes }) {\n\t//used to update edit screen orientation\n\tconst [orientation, setOrientation] = useState(\"left\");\n\tconsole.log(attributes);\n\tconsole.log(\"test\");\n\tconst getImageButton = (openEvent) => {\n\t\tif (attributes.imageUrl) {\n\t\t\tsetAttributes();\n\t\t\treturn (\n\t\t\t\t<img\n\t\t\t\t\tsrc={attributes.imageUrl}\n\t\t\t\t\tonClick={openEvent}\n\t\t\t\t\talt={attributes?.imageAlt}\n\t\t\t\t\tclassName=\"image test-image\"\n\t\t\t\t/>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t<Button onClick={openEvent} className=\"button button-large\">\n\t\t\t\t\t\tPick an image\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t};\n\n\treturn (\n\t\t<section {...useBlockProps()}>\n\t\t\t<select\n\t\t\t\tvalue={attributes.orientation}\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tconsole.log(e.target.value);\n\t\t\t\t\tsetAttributes({ orientation: e.target.value });\n\t\t\t\t\tsetOrientation(e.target.value);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<option value=\"left\">Image Left, Content Right</option>\n\t\t\t\t<option value=\"right\">Image Right, Content Left</option>\n\t\t\t</select>\n\n\t\t\t{orientation == \"right\" ? (\n\t\t\t\t<div>\n\t\t\t\t\t{/* <p className=\"test-text\"> */}\n\t\t\t\t\t{/* <TextControl\n\t\t\t\t\t\t\tlabel=\"write your text\"\n\t\t\t\t\t\t\tvalue={attributes.text}\n\t\t\t\t\t\t\tonChange={(value) => setAttributes({ text: value })}\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t<RichText\n\t\t\t\t\t\ttagName=\"p\" // The tag here is the element output and editable in the admin\n\t\t\t\t\t\tvalue={attributes.text} // Any existing content, either from the database or an attribute default\n\t\t\t\t\t\tallowedFormats={[\"core/bold\", \"core/italic\", \"core/link\"]} // Allow the content to be made bold or italic, but do not allow other formatting options\n\t\t\t\t\t\tonChange={(content) => setAttributes({ text: content })} // Store updated content as a block attribute\n\t\t\t\t\t\tplaceholder={__(\"Heading...\")} // Display this text before any content has been added by the user\n\t\t\t\t\t/>\n\t\t\t\t\t{/* </p> */}\n\t\t\t\t\t<MediaUploadCheck>\n\t\t\t\t\t\t<MediaUpload\n\t\t\t\t\t\t\tonSelect={(media) => {\n\t\t\t\t\t\t\t\tsetAttributes({ imageAlt: media.alt, imageUrl: media.url });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttype=\"image\"\n\t\t\t\t\t\t\tvalue={attributes.imageID}\n\t\t\t\t\t\t\trender={({ open }) => getImageButton(open)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</MediaUploadCheck>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t<MediaUploadCheck>\n\t\t\t\t\t\t<MediaUpload\n\t\t\t\t\t\t\tonSelect={(media) => {\n\t\t\t\t\t\t\t\tsetAttributes({ imageAlt: media.alt, imageUrl: media.url });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttype=\"image\"\n\t\t\t\t\t\t\tvalue={attributes.imageID}\n\t\t\t\t\t\t\trender={({ open }) => getImageButton(open)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</MediaUploadCheck>\n\t\t\t\t\t{/* <p className=\"test-text\">\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel=\"write your text\"\n\t\t\t\t\t\t\tvalue={attributes.text}\n\t\t\t\t\t\t\tonChange={(value) => setAttributes({ text: value })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</p> */}\n\n\t\t\t\t\t<RichText\n\t\t\t\t\t\ttagName=\"p\" // The tag here is the element output and editable in the admin\n\t\t\t\t\t\tvalue={attributes.text} // Any existing content, either from the database or an attribute default\n\t\t\t\t\t\tallowedFormats={[\"core/bold\", \"core/italic\", \"core/link\"]} // Allow the content to be made bold or italic, but do not allow other formatting options\n\t\t\t\t\t\tonChange={(content) => setAttributes({ text: content })} // Store updated content as a block attribute\n\t\t\t\t\t\tplaceholder={__(\"Heading...\")} // Display this text before any content has been added by the user\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</section>\n\t);\n}\n","__webpack_require__.h = () => (\"8177960052d5b6bb3a2c\")"],"names":["__","useBlockProps","MediaUpload","MediaUploadCheck","RichText","useState","TextControl","Button","Edit","attributes","className","setAttributes","_s","orientation","setOrientation","console","log","getImageButton","openEvent","imageUrl","createElement","src","onClick","alt","imageAlt","value","onChange","e","target","tagName","text","allowedFormats","content","placeholder","onSelect","media","url","type","imageID","render","open","_c","$RefreshReg$"],"sourceRoot":""}