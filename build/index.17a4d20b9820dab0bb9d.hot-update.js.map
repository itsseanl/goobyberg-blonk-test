{"version":3,"file":"index.17a4d20b9820dab0bb9d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AAMiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiC;AAC2B;AAC7C,SAASQ,IAAIA,CAAC;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACtEC,OAAO,CAACC,GAAG,CAACL,UAAU,CAAC;EACvBI,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACnB,MAAMC,cAAc,GAAIC,SAAS,IAAK;IACrC,IAAIP,UAAU,CAACQ,QAAQ,EAAE;MACxBN,aAAa,CAAC,CAAC;MACf,OACCO,oDAAA;QACCC,GAAG,EAAEV,UAAU,CAACQ,QAAS;QACzBG,OAAO,EAAEJ,SAAU;QACnBK,GAAG,EAAEZ,UAAU,EAAEa,QAAS;QAC1BZ,SAAS,EAAC;MAAkB,CAC5B,CAAC;IAEJ,CAAC,MAAM;MACN,OACCQ,oDAAA;QAAKR,SAAS,EAAC;MAAkB,GAChCQ,oDAAA,CAACX,yDAAM;QAACa,OAAO,EAAEJ,SAAU;QAACN,SAAS,EAAC;MAAqB,GAAC,eAEpD,CACJ,CAAC;IAER;EACD,CAAC;EAED,OACCQ,oDAAA;IAAA,GAAajB,sEAAa,CAAC;EAAC,GAC3BiB,oDAAA;IAAGR,SAAS,EAAC;EAAW,GACvBQ,oDAAA,CAACZ,8DAAW;IACXiB,KAAK,EAAC,iBAAiB;IACvBC,KAAK,EAAEf,UAAU,CAACgB,IAAK;IACvBC,QAAQ,EAAGF,KAAK,IAAKb,aAAa,CAAC;MAAEc,IAAI,EAAED;IAAM,CAAC;EAAE,CACpD,CACC,CAAC,EAGJN,oDAAA,CAACf,qEAAgB,QAEhBe,oDAAA,CAAChB,gEAAW;IACXyB,QAAQ,EAAGC,KAAK,IAAK;MACpBjB,aAAa,CAAC;QAAEW,QAAQ,EAAEM,KAAK,CAACP,GAAG;QAAEJ,QAAQ,EAAEW,KAAK,CAACC;MAAI,CAAC,CAAC;IAC5D,CAAE;IACFC,IAAI,EAAC,OAAO;IACZN,KAAK,EAAEf,UAAU,CAACsB,OAAQ;IAC1BC,MAAM,EAAEA,CAAC;MAAEC;IAAK,CAAC,KAAKlB,cAAc,CAACkB,IAAI;EAAE,CAC3C,CACgB,CACV,CAAC;AAEZ;AAACrB,EAAA,CAjDuBJ,IAAI;EAAA,QA0BbP,kEAAa;AAAA;AAAAiC,EAAA,GA1BJ1B,IAAI;AAAA,IAAA0B,EAAA;AAAAC,sCAAA,CAAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCvC5B","sources":["webpack://test/./src/edit.js","webpack://test/webpack/runtime/getFullHash"],"sourcesContent":["/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/\n */\nimport { __ } from \"@wordpress/i18n\";\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport {\n\tuseBlockProps,\n\tMediaUpload,\n\tMediaUploadCheck,\n\tRichText,\n} from \"@wordpress/block-editor\";\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * Those files can contain any CSS code that gets applied to the editor.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport \"./editor.scss\";\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @return {Element} Element to render.\n */\n\nimport { useState } from \"react\";\nimport { TextControl, Button } from \"@wordpress/components\";\nexport default function Edit({ attributes, className, setAttributes }) {\n\tconsole.log(attributes);\n\tconsole.log(\"test\");\n\tconst getImageButton = (openEvent) => {\n\t\tif (attributes.imageUrl) {\n\t\t\tsetAttributes();\n\t\t\treturn (\n\t\t\t\t<img\n\t\t\t\t\tsrc={attributes.imageUrl}\n\t\t\t\t\tonClick={openEvent}\n\t\t\t\t\talt={attributes?.imageAlt}\n\t\t\t\t\tclassName=\"image test-image\"\n\t\t\t\t/>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t<Button onClick={openEvent} className=\"button button-large\">\n\t\t\t\t\t\tPick an image\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t};\n\n\treturn (\n\t\t<section {...useBlockProps()}>\n\t\t\t<p className=\"test-text\">\n\t\t\t\t<TextControl\n\t\t\t\t\tlabel=\"write your text\"\n\t\t\t\t\tvalue={attributes.text}\n\t\t\t\t\tonChange={(value) => setAttributes({ text: value })}\n\t\t\t\t/>\n\t\t\t</p>\n\n\t\t\t{/* check if current user has upload permissions */}\n\t\t\t<MediaUploadCheck>\n\t\t\t\t{/* component to render media upload/library selector */}\n\t\t\t\t<MediaUpload\n\t\t\t\t\tonSelect={(media) => {\n\t\t\t\t\t\tsetAttributes({ imageAlt: media.alt, imageUrl: media.url });\n\t\t\t\t\t}}\n\t\t\t\t\ttype=\"image\"\n\t\t\t\t\tvalue={attributes.imageID}\n\t\t\t\t\trender={({ open }) => getImageButton(open)}\n\t\t\t\t/>\n\t\t\t</MediaUploadCheck>\n\t\t</section>\n\t);\n}\n","__webpack_require__.h = () => (\"36274b61316ed32592b0\")"],"names":["__","useBlockProps","MediaUpload","MediaUploadCheck","RichText","useState","TextControl","Button","Edit","attributes","className","setAttributes","_s","console","log","getImageButton","openEvent","imageUrl","createElement","src","onClick","alt","imageAlt","label","value","text","onChange","onSelect","media","url","type","imageID","render","open","_c","$RefreshReg$"],"sourceRoot":""}